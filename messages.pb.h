// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
namespace Messages {
class Matrix;
class MatrixDefaultTypeInternal;
extern MatrixDefaultTypeInternal _Matrix_default_instance_;
}  // namespace Messages
PROTOBUF_NAMESPACE_OPEN
template<> ::Messages::Matrix* Arena::CreateMaybeMessage<::Messages::Matrix>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Messages {

// ===================================================================

class Matrix :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.Matrix) */ {
 public:
  Matrix();
  virtual ~Matrix();

  Matrix(const Matrix& from);
  Matrix(Matrix&& from) noexcept
    : Matrix() {
    *this = ::std::move(from);
  }

  inline Matrix& operator=(const Matrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline Matrix& operator=(Matrix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Matrix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Matrix* internal_default_instance() {
    return reinterpret_cast<const Matrix*>(
               &_Matrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Matrix* other);
  friend void swap(Matrix& a, Matrix& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Matrix* New() const final {
    return CreateMaybeMessage<Matrix>(nullptr);
  }

  Matrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Matrix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Matrix& from);
  void MergeFrom(const Matrix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Matrix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.Matrix";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string stringdata = 3;
  int stringdata_size() const;
  void clear_stringdata();
  static const int kStringdataFieldNumber = 3;
  const std::string& stringdata(int index) const;
  std::string* mutable_stringdata(int index);
  void set_stringdata(int index, const std::string& value);
  void set_stringdata(int index, std::string&& value);
  void set_stringdata(int index, const char* value);
  void set_stringdata(int index, const char* value, size_t size);
  std::string* add_stringdata();
  void add_stringdata(const std::string& value);
  void add_stringdata(std::string&& value);
  void add_stringdata(const char* value);
  void add_stringdata(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stringdata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stringdata();

  // repeated uint32 intdata = 4;
  int intdata_size() const;
  void clear_intdata();
  static const int kIntdataFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 intdata(int index) const;
  void set_intdata(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_intdata(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      intdata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_intdata();

  // repeated double doubledata = 5;
  int doubledata_size() const;
  void clear_doubledata();
  static const int kDoubledataFieldNumber = 5;
  double doubledata(int index) const;
  void set_doubledata(int index, double value);
  void add_doubledata(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      doubledata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_doubledata();

  // required uint32 rows = 1;
  bool has_rows() const;
  void clear_rows();
  static const int kRowsFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 rows() const;
  void set_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint32 cols = 2;
  bool has_cols() const;
  void clear_cols();
  static const int kColsFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 cols() const;
  void set_cols(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Messages.Matrix)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stringdata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > intdata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > doubledata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rows_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cols_;
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Matrix

// required uint32 rows = 1;
inline bool Matrix::has_rows() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Matrix::clear_rows() {
  rows_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Matrix::rows() const {
  // @@protoc_insertion_point(field_get:Messages.Matrix.rows)
  return rows_;
}
inline void Matrix::set_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  rows_ = value;
  // @@protoc_insertion_point(field_set:Messages.Matrix.rows)
}

// required uint32 cols = 2;
inline bool Matrix::has_cols() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Matrix::clear_cols() {
  cols_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Matrix::cols() const {
  // @@protoc_insertion_point(field_get:Messages.Matrix.cols)
  return cols_;
}
inline void Matrix::set_cols(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  cols_ = value;
  // @@protoc_insertion_point(field_set:Messages.Matrix.cols)
}

// repeated string stringdata = 3;
inline int Matrix::stringdata_size() const {
  return stringdata_.size();
}
inline void Matrix::clear_stringdata() {
  stringdata_.Clear();
}
inline const std::string& Matrix::stringdata(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Matrix.stringdata)
  return stringdata_.Get(index);
}
inline std::string* Matrix::mutable_stringdata(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Matrix.stringdata)
  return stringdata_.Mutable(index);
}
inline void Matrix::set_stringdata(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Messages.Matrix.stringdata)
  stringdata_.Mutable(index)->assign(value);
}
inline void Matrix::set_stringdata(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Messages.Matrix.stringdata)
  stringdata_.Mutable(index)->assign(std::move(value));
}
inline void Matrix::set_stringdata(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stringdata_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Messages.Matrix.stringdata)
}
inline void Matrix::set_stringdata(int index, const char* value, size_t size) {
  stringdata_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Messages.Matrix.stringdata)
}
inline std::string* Matrix::add_stringdata() {
  // @@protoc_insertion_point(field_add_mutable:Messages.Matrix.stringdata)
  return stringdata_.Add();
}
inline void Matrix::add_stringdata(const std::string& value) {
  stringdata_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Messages.Matrix.stringdata)
}
inline void Matrix::add_stringdata(std::string&& value) {
  stringdata_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Messages.Matrix.stringdata)
}
inline void Matrix::add_stringdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stringdata_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Messages.Matrix.stringdata)
}
inline void Matrix::add_stringdata(const char* value, size_t size) {
  stringdata_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Messages.Matrix.stringdata)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Matrix::stringdata() const {
  // @@protoc_insertion_point(field_list:Messages.Matrix.stringdata)
  return stringdata_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Matrix::mutable_stringdata() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Matrix.stringdata)
  return &stringdata_;
}

// repeated uint32 intdata = 4;
inline int Matrix::intdata_size() const {
  return intdata_.size();
}
inline void Matrix::clear_intdata() {
  intdata_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Matrix::intdata(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Matrix.intdata)
  return intdata_.Get(index);
}
inline void Matrix::set_intdata(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  intdata_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Matrix.intdata)
}
inline void Matrix::add_intdata(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  intdata_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Matrix.intdata)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Matrix::intdata() const {
  // @@protoc_insertion_point(field_list:Messages.Matrix.intdata)
  return intdata_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Matrix::mutable_intdata() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Matrix.intdata)
  return &intdata_;
}

// repeated double doubledata = 5;
inline int Matrix::doubledata_size() const {
  return doubledata_.size();
}
inline void Matrix::clear_doubledata() {
  doubledata_.Clear();
}
inline double Matrix::doubledata(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Matrix.doubledata)
  return doubledata_.Get(index);
}
inline void Matrix::set_doubledata(int index, double value) {
  doubledata_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Matrix.doubledata)
}
inline void Matrix::add_doubledata(double value) {
  doubledata_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Matrix.doubledata)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Matrix::doubledata() const {
  // @@protoc_insertion_point(field_list:Messages.Matrix.doubledata)
  return doubledata_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Matrix::mutable_doubledata() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Matrix.doubledata)
  return &doubledata_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Messages

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
